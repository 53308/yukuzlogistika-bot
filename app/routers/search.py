"""Search functionality"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.keyboards import get_cargo_transport_choice, get_vehicle_types_keyboard
from app.models import get_db_connection
import logging
import math
import random
from datetime import datetime

router = Router()
logger = logging.getLogger(__name__)

class SearchState(StatesGroup):
    waiting_search_type = State()
    waiting_country_choice = State()
    waiting_city_choice = State()
    waiting_vehicle_choice = State()
    waiting_city_input = State()

# Extended city database with coordinates from Uzbekistan logistics bot data
CITY_COORDINATES = {
    # Major cities of Uzbekistan
    '—Ç–∞—à–∫–µ–Ω—Ç': (41.2995, 69.2401),
    'tashkent': (41.2995, 69.2401),
    'toshkent': (41.2995, 69.2401),
    '—Å–∞–º–∞—Ä–∫–∞–Ω–¥': (39.6270, 66.9750),
    'samarkand': (39.6270, 66.9750),
    'samarqand': (39.6270, 66.9750),
    '–Ω–∞–º–∞–Ω–≥–∞–Ω': (40.9983, 71.6726),
    'namangan': (40.9983, 71.6726),
    '–∞–Ω–¥–∏–∂–∞–Ω': (40.7821, 72.3442),
    'andijon': (40.7821, 72.3442),
    'andijan': (40.7821, 72.3442),
    '—Ñ–µ—Ä–≥–∞–Ω–∞': (40.3734, 71.7978),
    'fargona': (40.3734, 71.7978),
    'fergana': (40.3734, 71.7978),
    '–±—É—Ö–∞—Ä–∞': (39.7747, 64.4286),
    'buxoro': (39.7747, 64.4286),
    'bukhara': (39.7747, 64.4286),
    '—Ö–∏–≤–∞': (41.3775, 60.3619),
    'xiva': (41.3775, 60.3619),
    'khiva': (41.3775, 60.3619),
    '–Ω—É–∫—É—Å': (42.4731, 59.6103),
    'nukus': (42.4731, 59.6103),
    'qarshi': (38.8606, 65.7890),
    '–∫–∞—Ä—à–∏': (38.8606, 65.7890),
    '–∫–æ–∫–∞–Ω': (40.5272, 70.9409),
    'qoqon': (40.5272, 70.9409),
    'kokand': (40.5272, 70.9409),
    '—Ç–µ—Ä–º–µ–∑': (37.2242, 67.2783),
    'termiz': (37.2242, 67.2783),
    'termez': (37.2242, 67.2783),
    '–∂–∏–∑–∑–∞—Ö': (40.1158, 67.8420),
    'jizzax': (40.1158, 67.8420),
    'jizzakh': (40.1158, 67.8420),
    '–Ω–∞–≤–æ–∏': (40.0844, 65.3792),
    'navoiy': (40.0844, 65.3792),
    'navoi': (40.0844, 65.3792),
    '–≥—É–ª–∏—Å—Ç–∞–Ω': (40.4897, 68.7842),
    'guliston': (40.4897, 68.7842),
    'gulistan': (40.4897, 68.7842),
    '—É—Ä–≥–µ–Ω—á': (41.5500, 60.6333),
    'urganch': (41.5500, 60.6333),
    'urgench': (41.5500, 60.6333),
    
    # Tashkent region cities
    '–∞–Ω–≥—Ä–µ–Ω': (41.0167, 70.1436),
    'angren': (41.0167, 70.1436),
    '–∞–ª–º–∞–ª—ã–∫': (40.8547, 69.5997),
    'olmaliq': (40.8547, 69.5997),
    'almalyk': (40.8547, 69.5997),
    '–±–µ–∫–∞–±–∞–¥': (40.2139, 69.2661),
    'bekobod': (40.2139, 69.2661),
    'bekabad': (40.2139, 69.2661),
    '—è–Ω–≥–∏—é–ª—å': (41.1122, 69.0428),
    'yangiyul': (41.1122, 69.0428),
    '—á–∏—Ä—á–∏–∫': (41.4669, 69.5831),
    'chirchiq': (41.4669, 69.5831),
    'chirchik': (41.4669, 69.5831),
    '–≥–∞–∑–∞–ª–∫–µ–Ω—Ç': (41.5333, 69.2167),
    'gazalkent': (41.5333, 69.2167),
    '–ø—Å–∫–µ–Ω—Ç': (41.0333, 68.9000),
    'pskent': (41.0333, 68.9000),
    '—á–∏–Ω–∞–∑': (40.9383, 68.7989),
    'chinoz': (40.9383, 68.7989),
    'chinaz': (40.9383, 68.7989),
    
    # International cities
    '–º–æ—Å–∫–≤–∞': (55.7558, 37.6176),
    'moscow': (55.7558, 37.6176),
    '–∞–ª–º–∞—Ç—ã': (43.2220, 76.8512),
    'almaty': (43.2220, 76.8512),
    'olmata': (43.2220, 76.8512),
    '—Å—Ç–∞–º–±—É–ª': (41.0082, 28.9784),
    'istanbul': (41.0082, 28.9784),
    '–≥—Ä–æ–∑–Ω—ã–π': (43.3183, 45.6906),
    'grozny': (43.3183, 45.6906),
    '–∞—Å—Ç–∞–Ω–∞': (51.1694, 71.4491),
    'nur-sultan': (51.1694, 71.4491),
    '–∞—Å—Ç—Ä–∞—Ö–∞–Ω—å': (46.3497, 48.0408),
    'astrakhan': (46.3497, 48.0408),
    '–≤–æ–ª–≥–æ–≥—Ä–∞–¥': (48.7080, 44.5133),
    'volgograd': (48.7080, 44.5133),
    '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä': (45.0401, 38.9758),
    'krasnodar': (45.0401, 38.9758),
    '—Ä–æ—Å—Ç–æ–≤': (47.2357, 39.7015),
    'rostov': (47.2357, 39.7015),
    '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': (55.0084, 82.9357),
    'novosibirsk': (55.0084, 82.9357),
    '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': (56.8431, 60.6454),
    'ekaterinburg': (56.8431, 60.6454),
    '–∫–∞–∑–∞–Ω—å': (55.8304, 49.0661),
    'kazan': (55.8304, 49.0661),
    '—É—Ñ–∞': (54.7388, 55.9721),
    'ufa': (54.7388, 55.9721),
    '—á–µ–ª—è–±–∏–Ω—Å–∫': (55.1644, 61.4368),
    'chelyabinsk': (55.1644, 61.4368),
    '–æ–º—Å–∫': (54.9885, 73.3242),
    'omsk': (54.9885, 73.3242),
    '–ø–µ—Ä–º—å': (58.0105, 56.2502),
    'perm': (58.0105, 56.2502)
}

def calculate_distance_and_time(city1: str, city2: str):
    """Calculate distance and travel time between cities"""
    city1_lower = city1.lower().strip()
    city2_lower = city2.lower().strip()
    
    coords1 = CITY_COORDINATES.get(city1_lower)
    coords2 = CITY_COORDINATES.get(city2_lower)
    
    if not coords1 or not coords2:
        return 0, 0.0
    
    # Haversine formula
    R = 6371  # Earth's radius in kilometers
    
    lat1, lon1 = math.radians(coords1[0]), math.radians(coords1[1])
    lat2, lon2 = math.radians(coords2[0]), math.radians(coords2[1])
    
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    
    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2
    c = 2 * math.asin(math.sqrt(a))
    
    distance = int(R * c)
    travel_time = distance / 65  # 65 km/h average speed
    
    return distance, travel_time

def get_country_flag(city: str) -> str:
    """Get country flag emoji for city - expanded database"""
    city_lower = city.lower().strip()
    
    # Uzbekistan cities (expanded list from logistics bot data)
    uz_cities = [
        # Major cities
        '—Ç–∞—à–∫–µ–Ω—Ç', 'tashkent', 'toshkent', '—Å–∞–º–∞—Ä–∫–∞–Ω–¥', 'samarkand', 'samarqand',
        '–Ω–∞–º–∞–Ω–≥–∞–Ω', 'namangan', '–∞–Ω–¥–∏–∂–∞–Ω', 'andijon', 'andijan', '—Ñ–µ—Ä–≥–∞–Ω–∞', 'fargona', 'fergana',
        '–±—É—Ö–∞—Ä–∞', 'buxoro', 'bukhara', '—Ö–∏–≤–∞', 'xiva', 'khiva', '–Ω—É–∫—É—Å', 'nukus',
        '–∫–∞—Ä—à–∏', 'qarshi', '–∫–æ–∫–∞–Ω', 'qoqon', 'kokand', '—Ç–µ—Ä–º–µ–∑', 'termiz', 'termez',
        '–∂–∏–∑–∑–∞—Ö', 'jizzax', 'jizzakh', '–Ω–∞–≤–æ–∏', 'navoiy', 'navoi', '–≥—É–ª–∏—Å—Ç–∞–Ω', 'guliston', 'gulistan',
        '—É—Ä–≥–µ–Ω—á', 'urganch', 'urgench',
        # Tashkent region
        '–∞–Ω–≥—Ä–µ–Ω', 'angren', '–∞–ª–º–∞–ª—ã–∫', 'olmaliq', 'almalyk', '–±–µ–∫–∞–±–∞–¥', 'bekobod', 'bekabad',
        '—è–Ω–≥–∏—é–ª—å', 'yangiyul', '—á–∏—Ä—á–∏–∫', 'chirchiq', 'chirchik', '–≥–∞–∑–∞–ª–∫–µ–Ω—Ç', 'gazalkent',
        '–ø—Å–∫–µ–Ω—Ç', 'pskent', '—á–∏–Ω–∞–∑', 'chinoz', 'chinaz', '—Ö–æ—Ä–∑–∏–≥–∞', 'xorazm'
    ]
    
    # Russian cities (expanded)
    ru_cities = [
        '–º–æ—Å–∫–≤–∞', 'moscow', '–≥—Ä–æ–∑–Ω—ã–π', 'grozny', '–∞—Å—Ç—Ä–∞—Ö–∞–Ω—å', 'astrakhan',
        '–≤–æ–ª–≥–æ–≥—Ä–∞–¥', 'volgograd', '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä', 'krasnodar', '—Ä–æ—Å—Ç–æ–≤', 'rostov',
        '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', 'novosibirsk', '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', 'ekaterinburg',
        '–∫–∞–∑–∞–Ω—å', 'kazan', '—É—Ñ–∞', 'ufa', '—á–µ–ª—è–±–∏–Ω—Å–∫', 'chelyabinsk',
        '–æ–º—Å–∫', 'omsk', '–ø–µ—Ä–º—å', 'perm', '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥', 'saint-petersburg',
        '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥', 'nizhny novgorod'
    ]
    
    # Kazakhstan cities
    kz_cities = ['–∞–ª–º–∞—Ç—ã', 'almaty', 'olmata', '–∞—Å—Ç–∞–Ω–∞', 'nur-sultan', '—à—ã–º–∫–µ–Ω—Ç', 'shymkent']
    
    # Turkey cities
    tr_cities = ['—Å—Ç–∞–º–±—É–ª', 'istanbul', '–∞–Ω–∫–∞—Ä–∞', 'ankara', '–∏–∑–º–∏—Ä', 'izmir']
    
    if city_lower in uz_cities:
        return 'üá∫üáø'
    elif city_lower in ru_cities:
        return 'üá∑üá∫'
    elif city_lower in kz_cities:
        return 'üá∞üáø'  
    elif city_lower in tr_cities:
        return 'üáπüá∑'
    else:
        return 'üåç'

def format_time_ago(created_at) -> str:
    """Format time ago text exactly like original - shows '4 –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥' etc"""
    if isinstance(created_at, str):
        created_at = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
    
    import pytz
    now = datetime.now(pytz.UTC)
    
    if created_at.tzinfo is None:
        created_at = pytz.utc.localize(created_at)
    
    diff = now - created_at
    total_seconds = int(diff.total_seconds())
    
    if diff.days > 7:
        return f"{diff.days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥"
    elif diff.days > 0:
        if diff.days == 1:
            return "1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥"
        elif diff.days in [2, 3, 4]:
            return f"{diff.days} –¥–Ω—è –Ω–∞–∑–∞–¥"
        else:
            return f"{diff.days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥"
    elif total_seconds >= 3600:
        hours = total_seconds // 3600
        if hours == 1:
            return "1 —á–∞—Å –Ω–∞–∑–∞–¥"
        elif hours in [2, 3, 4]:
            return f"{hours} —á–∞—Å–∞ –Ω–∞–∑–∞–¥"
        else:
            return f"{hours} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"
    else:
        minutes = max(1, total_seconds // 60)
        if minutes == 1:
            return "1 –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥"
        elif minutes in [2, 3, 4]:
            return f"{minutes} –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥"
        else:
            return f"{minutes} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥"

@router.message(F.text == "üîç –ë—ã—Å—Ç—Ä—ã–π –ü–æ–∏—Å–∫")
async def quick_search_handler(message: Message, state: FSMContext):
    """Quick search handler - shows search type selection like original with bottom keyboard"""
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –ø–æ–∏—Å–∫–∞"
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¶ –ù–∞–π—Ç–∏ –≥—Ä—É–∑")],
            [KeyboardButton(text="üöõ –ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer(text, reply_markup=keyboard)
    await state.set_state(SearchState.waiting_search_type)

@router.message(F.text == "üì¶ –ù–∞–π—Ç–∏ –≥—Ä—É–∑")
async def find_cargo_from_search(message: Message, state: FSMContext):
    """Find cargo from search menu - show country selection"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    countries_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üá∫üáø –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω - 503", callback_data="country_uz_cargo"),
            InlineKeyboardButton(text="üá¶üá´ –ê—Ñ–≥–∞–Ω–∏—Å—Ç–∞–Ω - 2", callback_data="country_af_cargo")
        ],
        [
            InlineKeyboardButton(text="üáßüáæ –ë–µ–ª–æ—Ä—É—Å—Å–∏—è - 7", callback_data="country_by_cargo"),
            InlineKeyboardButton(text="üá≠üá∫ –í–µ–Ω–≥—Ä–∏—è - 1", callback_data="country_hu_cargo")
        ],
        [
            InlineKeyboardButton(text="üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è - 2", callback_data="country_de_cargo"),
            InlineKeyboardButton(text="üá¨üá™ –ì—Ä—É–∑–∏—è - 1", callback_data="country_ge_cargo")
        ],
        [
            InlineKeyboardButton(text="üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω - 7", callback_data="country_kz_cargo"),
            InlineKeyboardButton(text="üá∞üá¨ –ö–∞—Ä–∞–∫–∞–ª–ø–∞–∫—Å—Ç–∞–Ω - 6", callback_data="country_kk_cargo")
        ],
        [
            InlineKeyboardButton(text="üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω - 1", callback_data="country_kg_cargo"),
            InlineKeyboardButton(text="üá∑üá∫ –†–æ—Å—Å–∏—è - 25", callback_data="country_ru_cargo")
        ],
        [
            InlineKeyboardButton(text="üáπüáØ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω - 2", callback_data="country_tj_cargo"),
            InlineKeyboardButton(text="üáπüá≤ –¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω - 1", callback_data="country_tm_cargo")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_search_menu")]
    ])
    
    await message.answer(
        "üîç <b>–ë—ã—Å—Ç—Ä—ã–π –ü–æ–∏—Å–∫</b>\n\n"
        "üöö –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –ø–æ–∏—Å–∫–∞\n\n"
        "üì¶ <b>–ù–∞–π—Ç–∏ –≥—Ä—É–∑</b>\n"
        "üöö‚ö°‚ö°‚ö°‚ö° 12:58\n\n"
        "üì¶ <b>–ù–∞–π–¥–µ–Ω–æ 599 –æ–±—ä—è–≤–ª–µ–Ω–∏–π, 107 –∏–∑ –Ω–∏—Ö —Å–µ–≥–æ–¥–Ω—è</b>",
        reply_markup=countries_keyboard,
        parse_mode="HTML"
    )
    await state.set_state(SearchState.waiting_country_choice)
    await state.update_data(search_type="cargo")

@router.message(F.text == "üöõ –ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
async def find_transport_from_search(message: Message, state: FSMContext):
    """Find transport from search menu - show country selection"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    countries_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üá∫üáø –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω - 503", callback_data="country_uz_transport"),
            InlineKeyboardButton(text="üá¶üá´ –ê—Ñ–≥–∞–Ω–∏—Å—Ç–∞–Ω - 2", callback_data="country_af_transport")
        ],
        [
            InlineKeyboardButton(text="üáßüáæ –ë–µ–ª–æ—Ä—É—Å—Å–∏—è - 7", callback_data="country_by_transport"),
            InlineKeyboardButton(text="üá≠üá∫ –í–µ–Ω–≥—Ä–∏—è - 1", callback_data="country_hu_transport")
        ],
        [
            InlineKeyboardButton(text="üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è - 2", callback_data="country_de_transport"),
            InlineKeyboardButton(text="üá¨üá™ –ì—Ä—É–∑–∏—è - 1", callback_data="country_ge_transport")
        ],
        [
            InlineKeyboardButton(text="üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω - 7", callback_data="country_kz_transport"),
            InlineKeyboardButton(text="üá∞üá¨ –ö–∞—Ä–∞–∫–∞–ª–ø–∞–∫—Å—Ç–∞–Ω - 6", callback_data="country_kk_transport")
        ],
        [
            InlineKeyboardButton(text="üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω - 1", callback_data="country_kg_transport"),
            InlineKeyboardButton(text="üá∑üá∫ –†–æ—Å—Å–∏—è - 25", callback_data="country_ru_transport")
        ],
        [
            InlineKeyboardButton(text="üáπüáØ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω - 2", callback_data="country_tj_transport"),
            InlineKeyboardButton(text="üáπüá≤ –¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω - 1", callback_data="country_tm_transport")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_search_menu")]
    ])
    
    await message.answer(
        "üîç <b>–ë—ã—Å—Ç—Ä—ã–π –ü–æ–∏—Å–∫</b>\n\n"
        "üöö –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –ø–æ–∏—Å–∫–∞\n\n"
        "üöö <b>–ù–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç</b>\n"
        "üöö‚ö°‚ö°‚ö°‚ö° 12:58\n\n"
        "üöö <b>–ù–∞–π–¥–µ–Ω–æ 498 –æ–±—ä—è–≤–ª–µ–Ω–∏–π, 91 –∏–∑ –Ω–∏—Ö —Å–µ–≥–æ–¥–Ω—è</b>",
        reply_markup=countries_keyboard,
        parse_mode="HTML"
    )
    await state.set_state(SearchState.waiting_country_choice)
    await state.update_data(search_type="transport")

# Country selection callback handlers  
@router.callback_query(F.data.startswith("country_"))
async def handle_country_callback(callback_query: CallbackQuery, state: FSMContext):
    """Handle country selection callbacks"""
    from app.country_handlers import handle_country_selection
    await handle_country_selection(callback_query, state)

# City selection callback handlers
@router.callback_query(F.data.startswith("city_"))
async def handle_city_callback(callback_query: CallbackQuery, state: FSMContext):
    """Handle city selection callbacks"""
    from app.country_handlers import handle_city_selection
    await handle_city_selection(callback_query, state)

# Search function for cities
async def perform_search_by_city(callback_query: CallbackQuery, city_name: str, search_type: str, state: FSMContext):
    """Perform search by city name"""
    try:
        # Import comprehensive city database
        from app.city_database import get_city_variants
        
        # Get ALL possible variants for the city
        search_variants = get_city_variants(city_name.lower())
        
        import psycopg2
        import os
        
        # Connect to PostgreSQL database
        DATABASE_URL = os.getenv('DATABASE_URL')
        if not DATABASE_URL:
            await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
            
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        
        # Build query based on search type
        if search_type == "cargo":
            query = "SELECT * FROM announcements WHERE announcement_type = 'cargo'"
        else:
            query = "SELECT * FROM announcements WHERE announcement_type = 'transport'"
        
        # Add city search conditions
        conditions = []
        city_conditions = []
        for variant in search_variants:
            city_conditions.append(f"LOWER(from_location) LIKE '%{variant.lower()}%' OR LOWER(to_location) LIKE '%{variant.lower()}%'")
        
        if city_conditions:
            conditions.append(f"({' OR '.join(city_conditions)})")
        
        if conditions:
            query += " AND " + " AND ".join(conditions)
        
        query += " ORDER BY created_at DESC LIMIT 6"
        
        cursor.execute(query)
        results = cursor.fetchall()
        
        cursor.close()
        conn.close()
        
        if not results:
            await callback_query.message.edit_text(f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É '{city_name}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # Send results as individual messages exactly like original
        search_icon = "üì¶" if search_type == "cargo" else "üöö"
        await callback_query.message.edit_text(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ {search_icon} –≤ {city_name}:")
        
        for i, row in enumerate(results[:5], 1):
            # Unpack all columns from database
            (announcement_id, title, description, ann_type, status, from_loc, to_loc, 
             cargo_type, vehicle_type, weight_capacity, contact_name, contact_phone, 
             telegram_username, price_per_ton, departure_date, estimated_delivery, 
             special_requirements, source, user_id, created_at, updated_at) = row
            
            # Get country flag for location
            flag = get_country_flag(from_loc)
            
            # Format time exactly like original
            time_str = format_time_ago(created_at)
            
            # Create message text exactly like original bot
            message_text = f"{i}. {flag} <b>{from_loc} - {to_loc}</b>\n"
            if cargo_type and cargo_type.strip():
                message_text += f"üì¶ {cargo_type}\n"
            if vehicle_type and vehicle_type.strip():
                message_text += f"üöõ {vehicle_type}\n"
            message_text += f"‚è∞ {time_str}"
            
            # Create keyboard with "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" button
            detail_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"detail_{announcement_id}")]
            ])
            
            await callback_query.message.answer(
                message_text, 
                parse_mode="HTML",
                reply_markup=detail_keyboard
            )
        
        # Show "6 –∏–∑ 15 –ø–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ" button if more results exist
        if len(results) == 6:
            more_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="6 –∏–∑ 15 –ø–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ", callback_data=f"show_more_{city_name}_{search_type}")]
            ])
            await callback_query.message.answer("", reply_markup=more_keyboard)
        
    except Exception as e:
        logger.error(f"Search error: {e}")
        await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")


    await state.set_state(SearchState.waiting_city_input)
    await state.update_data(search_type="transport", vehicle_filter="all")

@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: Message, state: FSMContext):
    """Back to main menu"""
    from app.keyboards import get_main_menu
    menu = get_main_menu()
    await message.answer("üì¶ –ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=menu)
    await state.clear()

# Menu button handlers with ReplyKeyboardMarkup
@router.message(F.text == "üì¶ –ú–æ–∏ –≥—Ä—É–∑—ã")
async def my_cargo_handler(message: Message):
    """My cargo handler"""
    await message.answer("üì¶ <b>–ú–æ–∏ –≥—Ä—É–∑—ã</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –≥—Ä—É–∑–∞—Ö.")

@router.message(F.text == "üöõ –ú–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
async def my_transport_handler(message: Message):
    """My transport handler"""
    await message.answer("üöõ <b>–ú–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ.")

@router.message(F.text == "üì¶ –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–∑")
async def add_cargo_handler(message: Message):
    """Add cargo handler"""
    await message.answer("üì¶ <b>–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–∑</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–∑–µ:\n\n‚Ä¢ –û—Ç–∫—É–¥–∞\n‚Ä¢ –ö—É–¥–∞\n‚Ä¢ –í–µ—Å\n‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ\n‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç")

@router.message(F.text == "üöõ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
async def add_transport_handler(message: Message):
    """Add transport handler"""
    await message.answer("üöõ <b>–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ:\n\n‚Ä¢ –¢–∏–ø\n‚Ä¢ –û—Ç–∫—É–¥–∞\n‚Ä¢ –ö—É–¥–∞\n‚Ä¢ –¢–æ–Ω–Ω–∞–∂\n‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç")

@router.message(F.text == "üåê –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")
async def change_language_handler(message: Message):
    """Change language handler"""
    await message.answer("üåê <b>–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:\nüá∑üá∫ –†—É—Å—Å–∫–∏–π\nüá∫üáø O'zbekcha\nüá∫üáø –é–∑–±–µ–∫—á–∞")

@router.message(F.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def notifications_handler(message: Message):
    """Notifications handler"""
    await message.answer("üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.")

@router.message(F.text == "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞")
async def subscription_handler(message: Message):
    """Subscription handler"""
    await message.answer("üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞</b>\n\nüÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 5 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤/–¥–µ–Ω—å\nüíé –ü—Ä–µ–º–∏—É–º: –±–µ–∑–ª–∏–º–∏—Ç –∑–∞ 50,000 —Å—É–º/–º–µ—Å—è—Ü")

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def statistics_handler(message: Message):
    """Statistics handler"""
    await message.answer("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\nüì¶ –û–±—ä—è–≤–ª–µ–Ω–∏–π: 5005\nüÜï –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: 1604\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 2341")

@router.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts_handler(message: Message):
    """Contacts handler"""
    await message.answer("üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b>\n\nüë®‚Äçüíº –ê–¥–º–∏–Ω: @admin_yuk_uz\nüåê yukuz.uz\nüìß info@yukuz.uz")

# Callback handlers for menu actions  
@router.callback_query(F.data == "back_main")
async def back_main_callback(callback: CallbackQuery):
    """Back to main menu"""
    if callback.message:
        from app.keyboards import get_main_menu
        menu = get_main_menu()
        await callback.message.answer("üì¶ –ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=menu)
    await callback.answer()

@router.callback_query(F.data.startswith("my_"))
async def my_posts_callback(callback: CallbackQuery):
    """My posts handler"""
    if callback.data and callback.message:
        post_type = callback.data.split("_")[1]
        if post_type == "cargo":
            text = "üì¶ <b>–ú–æ–∏ –≥—Ä—É–∑—ã</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –≥—Ä—É–∑–∞—Ö."
        else:
            text = "üöõ <b>–ú–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ."
        await callback.message.edit_text(text)
    await callback.answer()

@router.callback_query(F.data.startswith("add_"))
async def add_post_callback(callback: CallbackQuery):
    """Add post handler"""
    if callback.data and callback.message:
        post_type = callback.data.split("_")[1]
        if post_type == "cargo":
            text = "üì¶ <b>–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–∑</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–∑–µ:\n\n‚Ä¢ –û—Ç–∫—É–¥–∞\n‚Ä¢ –ö—É–¥–∞\n‚Ä¢ –í–µ—Å\n‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ\n‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç"
        else:
            text = "üöõ <b>–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ:\n\n‚Ä¢ –¢–∏–ø\n‚Ä¢ –û—Ç–∫—É–¥–∞\n‚Ä¢ –ö—É–¥–∞\n‚Ä¢ –¢–æ–Ω–Ω–∞–∂\n‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç"
        await callback.message.edit_text(text)
    await callback.answer()

@router.callback_query(F.data.in_(["change_language", "notifications", "subscription", "statistics", "contacts"]))
async def settings_submenu_callback(callback: CallbackQuery):
    """Settings submenu handler"""
    if callback.data and callback.message:
        texts = {
            "change_language": "üåê <b>–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
            "notifications": "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.",
            "subscription": "üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞</b>\n\nüÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 5 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤/–¥–µ–Ω—å\nüíé –ü—Ä–µ–º–∏—É–º: –±–µ–∑–ª–∏–º–∏—Ç –∑–∞ 50,000 —Å—É–º/–º–µ—Å—è—Ü",
            "statistics": "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\nüì¶ –û–±—ä—è–≤–ª–µ–Ω–∏–π: 5005\nüÜï –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: 1604\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 2341",
            "contacts": "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b>\n\nüë®‚Äçüíº –ê–¥–º–∏–Ω: @admin_yuk_uz\nüåê yukuz.uz\nüìß info@yukuz.uz"
        }
        await callback.message.edit_text(texts[callback.data])
    await callback.answer()

@router.callback_query(F.data.in_(["how_to_use", "about_subscription", "contact_us", "rules"]))
async def help_submenu_callback(callback: CallbackQuery):
    """Help submenu handler"""
    if callback.data and callback.message:
        texts = {
            "how_to_use": "‚ùì <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è</b>\n\n1. üîç –ë—ã—Å—Ç—Ä—ã–π –ü–æ–∏—Å–∫ - –Ω–∞–π—Ç–∏ –≥—Ä—É–∑\n2. üì¶ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è - –≤–∞—à–∏ –ø–æ—Å—Ç—ã\n3. ‚ûï –î–æ–±–∞–≤–∏—Ç—å - —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç\n4. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - —è–∑—ã–∫, –ø–æ–¥–ø–∏—Å–∫–∞\n5. ‚ÑπÔ∏è –ü–æ–º–æ—â—å - —Å–ø—Ä–∞–≤–∫–∞",
            "about_subscription": "üí≥ <b>–û –ø–æ–¥–ø–∏—Å–∫–µ</b>\n\nüÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 5 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ –¥–µ–Ω—å\nüíé –ü—Ä–µ–º–∏—É–º: –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø\nüí∞ –¶–µ–Ω–∞: 50,000 —Å—É–º/–º–µ—Å—è—Ü",
            "contact_us": "üìû <b>–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏</b>\n\nüë®‚Äçüíº –ê–¥–º–∏–Ω: @admin_yuk_uz\nüì± –ö–∞–Ω–∞–ª: @yuk_uz_news\nüåê –°–∞–π—Ç: yukuz.uz",
            "rules": "üìã <b>–ü—Ä–∞–≤–∏–ª–∞</b>\n\n‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n‚Ä¢ –ù–µ —Å–ø–∞–º—å—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏\n‚Ä¢ –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã\n‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –∑–∞–∫–æ–Ω—ã –£–ó"
        }
        await callback.message.edit_text(texts[callback.data])
    await callback.answer()

@router.message(F.text == "üì¶ –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def my_announcements_handler(message: Message):
    """My announcements handler - shows user's posts"""
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¶ –ú–æ–∏ –≥—Ä—É–∑—ã")],
            [KeyboardButton(text="üöõ –ú–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("üì¶ <b>–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</b>", reply_markup=keyboard)

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def add_announcement_handler(message: Message):
    """Add announcement handler - goes to creation interface"""
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¶ –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–∑")],
            [KeyboardButton(text="üöõ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b>", reply_markup=keyboard)

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_handler(message: Message):
    """Settings handler - goes to settings menu"""
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåê –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")],
            [KeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")],
            [KeyboardButton(text="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>", reply_markup=keyboard)

@router.message(F.text.in_(["–í—Å–µ", "–¢–µ–Ω—Ç", "–†–µ—Ñ", "–º–∞–ª–µ–Ω—å–∫–∏–π –ò—Å—É–∑—É", "–±–æ–ª—å—à–æ–π –ò—Å—É–∑—É", "–ß–∞–∫–º–∞–Ω", "–ö–∞–º–∞–∑", "–ú–µ–≥–∞", "–ü–ª–æ—â–∞–¥–∫–∞", "–ü–æ—Ä–æ–≤–æ–∑", "–¢—Ä–∞–ª", "–õ–∞–±–æ", "–î–æ–≥—Ä—É–∑", "–°–ø—Ä–∏–Ω—Ç–µ—Ä", "–î—Ä—É–≥–∏–µ"]))
async def vehicle_selection(message: Message, state: FSMContext):
    """Handle vehicle type selection"""
    vehicle_mapping = {
        "–í—Å–µ": "all",
        "–¢–µ–Ω—Ç": "tent", 
        "–†–µ—Ñ": "ref",
        "–º–∞–ª–µ–Ω—å–∫–∏–π –ò—Å—É–∑—É": "small_isuzu",
        "–±–æ–ª—å—à–æ–π –ò—Å—É–∑—É": "big",
        "–ß–∞–∫–º–∞–Ω": "chakman",
        "–ö–∞–º–∞–∑": "kamaz",
        "–ú–µ–≥–∞": "mega",
        "–ü–ª–æ—â–∞–¥–∫–∞": "platform",
        "–ü–æ—Ä–æ–≤–æ–∑": "train",
        "–¢—Ä–∞–ª": "tral",
        "–õ–∞–±–æ": "labo",
        "–î–æ–≥—Ä—É–∑": "dogruz",
        "–°–ø—Ä–∏–Ω—Ç–µ—Ä": "sprinter",
        "–î—Ä—É–≥–∏–µ": "other"
    }
    
    vehicle_type = vehicle_mapping.get(message.text, "all")
    await state.update_data(vehicle_filter=vehicle_type)
    
    await message.answer(f"üîÑ <b>–¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω: {message.text}</b>")
    
    instructions = """–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤:

–ü—Ä–∏–º–µ—Ä—ã:

‚è∫ Toshkent
‚è∫ –ú–æ—Å–∫–≤–∞
‚è∫ Toshkent –°–∞–º–∞—Ä–∫–∞–Ω–¥
‚è∫ –°—Ç–∞–º–±—É–ª Olmata"""
    
    await message.answer(instructions)
    await state.set_state(SearchState.waiting_city_input)

@router.message(SearchState.waiting_city_input)
async def handle_city_search(message: Message, state: FSMContext):
    """Handle city search input"""
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞")
        return
        
    data = await state.get_data()
    search_type = data.get("search_type", "cargo")
    vehicle_filter = data.get("vehicle_filter", "all")
    
    search_text = message.text.strip()
    logger.info(f"Search: {search_type}, filter: {vehicle_filter}, text: {search_text}")
    
    # Parse cities
    cities = search_text.replace("‚Üí", " ").replace("-", " ").split()
    from_city = cities[0] if cities else ""
    to_city = cities[1] if len(cities) > 1 else ""
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # Build query
        if search_type == "cargo":
            query = "SELECT * FROM announcements WHERE announcement_type = 'cargo'"
            conditions = []
            
            if vehicle_filter != "all":
                filter_terms = {
                    'tent': ['—Ç–µ–Ω—Ç', 'tent'],
                    'ref': ['—Ä–µ—Ñ', 'ref'],
                    'small_isuzu': ['–∏—Å—É–∑—É', 'isuzu'],
                    'big': ['–±–æ–ª—å—à–æ–π', 'big'],
                    'chakman': ['—á–∞–∫–º–∞–Ω'],
                    'kamaz': ['–∫–∞–º–∞–∑', 'kamaz'],
                    'mega': ['–º–µ–≥–∞', 'mega'],
                    'platform': ['–ø–ª–æ—â–∞–¥–∫–∞', '–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞'],
                    'train': ['–ø–æ—Ä–æ–≤–æ–∑'],
                    'tral': ['—Ç—Ä–∞–ª'],
                    'labo': ['–ª–∞–±–æ'],
                    'dogruz': ['–¥–æ–≥—Ä—É–∑'],
                    'sprinter': ['—Å–ø—Ä–∏–Ω—Ç–µ—Ä']
                }
                
                terms = filter_terms.get(vehicle_filter, [vehicle_filter])
                vehicle_conditions = []
                for term in terms:
                    vehicle_conditions.append(f"(LOWER(vehicle_type) LIKE '%{term}%' OR LOWER(cargo_type) LIKE '%{term}%' OR LOWER(description) LIKE '%{term}%')")
                
                if vehicle_conditions:
                    conditions.append(f"({' OR '.join(vehicle_conditions)})")
        else:
            query = "SELECT * FROM announcements WHERE announcement_type = 'transport'"
            conditions = []
        
        # Import comprehensive city database
        from app.city_database import get_city_variants
        
        # Smart city search with comprehensive variants
        if from_city:
            from_city_clean = from_city.lower().strip()
            
            # Get ALL possible variants including grammatical forms
            search_variants = get_city_variants(from_city_clean)
            from_conditions = []
            for variant in search_variants:
                from_conditions.append(f"LOWER(from_location) LIKE '%{variant.lower()}%'")
            conditions.append(f"({' OR '.join(from_conditions)})")
            
        if to_city:
            to_city_clean = to_city.lower().strip()
            
            # Get ALL possible variants for destination city
            search_variants = get_city_variants(to_city_clean)
            to_conditions = []
            for variant in search_variants:
                to_conditions.append(f"LOWER(to_location) LIKE '%{variant.lower()}%'")
            conditions.append(f"({' OR '.join(to_conditions)})")
        
        if conditions:
            query += " AND " + " AND ".join(conditions)
        
        query += " ORDER BY created_at DESC LIMIT 6"
        
        cursor.execute(query)
        results = cursor.fetchall()
        
        cursor.close()
        conn.close()
        
        if not results:
            await message.answer("‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # Send first 5 results as individual messages exactly like original
        for i, row in enumerate(results[:5], 1):
            # Unpack all 24 columns from database
            (announcement_id, title, description, ann_type, status, from_loc, to_loc, 
             weight, cargo_type, vehicle_type, contact_name, contact_phone, contact_address,
             notes, user_tg_id, user_name, location_lat, location_lon, created_at, updated_at, 
             expires_at, views_count, contacts_accessed, message_url) = row
            
            from_flag = get_country_flag(from_loc)
            to_flag = get_country_flag(to_loc)
            
            distance, travel_time = calculate_distance_and_time(from_loc, to_loc)
            time_ago = format_time_ago(created_at)
            
            # Exact format like in image: "1. üá∫üáø –ê–Ω–≥—Ä–µ–Ω - üá∑üá∫ –ì—Ä–æ–∑–Ω—ã–π"
            text = f"<b>{i}. {from_flag} {from_loc} - {to_flag} {to_loc}</b>\n\n"
            text += f"‚öñÔ∏è {weight}\n"
            
            if vehicle_type:
                text += f"üöö {vehicle_type}\n"
            
            if cargo_type:
                text += f"üì¶ {cargo_type}\n"
            
            if distance > 0:
                text += f"üõ£Ô∏è {distance} –∫–º {travel_time:.1f} —á–∞—Å–æ–≤\n\n"
            
            text += time_ago
            
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details:{announcement_id}")]
                ]
            )
            
            await message.answer(text, reply_markup=keyboard)
        
        # Get total count for summary
        count_query = "SELECT COUNT(*) FROM announcements WHERE status = 'published'"
        if conditions:
            count_query += " AND " + " AND ".join(conditions)
        
        cursor.execute(count_query)
        total_count = cursor.fetchone()[0]
        
        # Count today's announcements
        today_query = count_query + " AND DATE(created_at) = CURRENT_DATE"
        cursor.execute(today_query)
        today_count = cursor.fetchone()[0]
        
        # Summary message EXACTLY like in image: "üöö –ù–∞–π–¥–µ–Ω–æ 4883 –æ–±—ä—è–≤–ª–µ–Ω–∏–π, 728 –∏–∑ –Ω–∏—Ö —Å–µ–≥–æ–¥–Ω—è"
        summary_text = f"üöö –ù–∞–π–¥–µ–Ω–æ {total_count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π, {today_count} –∏–∑ –Ω–∏—Ö —Å–µ–≥–æ–¥–Ω—è"
        await message.answer(summary_text)
        
        # Show pagination button if more results available
        if len(results) >= 5 and total_count > 5:
            summary_keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=f"5 –∏–∑ {total_count} –ø–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ", callback_data=f"more:{vehicle_filter}:{from_city or ''}:{to_city or ''}:5")]
                ]
            )
            await message.answer("", reply_markup=summary_keyboard)
        
    except Exception as e:
        logger.error(f"Search error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.callback_query(F.data.startswith("details:"))
async def show_announcement_details(callback: CallbackQuery):
    """Show detailed view exactly like original"""
    if not callback.data:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return
        
    announcement_id = callback.data.split(":")[1]
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # Get announcement details
        cursor.execute("SELECT * FROM announcements WHERE id = %s", (announcement_id,))
        row = cursor.fetchone()
        
        if not row:
            await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # Update views count
        cursor.execute("UPDATE announcements SET views_count = views_count + 1 WHERE id = %s", (announcement_id,))
        conn.commit()
        
        # Unpack all 24 columns from database  
        (announcement_id, title, description, ann_type, status, from_loc, to_loc, 
         weight, cargo_type, vehicle_type, contact_name, contact_phone, contact_address,
         notes, user_tg_id, user_name, location_lat, location_lon, created_at, updated_at, 
         expires_at, views, contacts, message_url) = row
        
        # Format exactly like the image from attached_assets/image_1755264553345.png
        text = f"<b>{contact_name}</b>\n\n"
        text += f"<b>{from_loc} - {to_loc}</b>\n\n"
        
        if cargo_type and cargo_type.strip():
            text += f"{cargo_type}\n\n"
        
        text += f"<b>–¢–æ–Ω–Ω–∞: {weight}</b>\n\n"
        text += "–¢–µ–ª:\n\n"
        text += (description if description else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        text += f"\n\nüëÅ {views + 1} üìû {contacts}"
        
        # Keyboard exactly like original - 3 buttons in exact layout from image
        keyboard_buttons = [
            [
                InlineKeyboardButton(text="üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data=f"phone:{contact_phone}:{announcement_id}"),
                InlineKeyboardButton(text="üí¨ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é", url=f"https://t.me/user?id={user_tg_id}" if user_tg_id else "https://t.me/uzlogistics_pro_bot")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        cursor.close()
        conn.close()
        
        if callback.message:
            await callback.message.answer(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing details: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

@router.callback_query(F.data.startswith("phone:"))
async def show_phone_number(callback: CallbackQuery):
    """Show phone number and increment contact counter"""
    if not callback.data:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return
        
    parts = callback.data.split(":")
    phone = parts[1]
    announcement_id = parts[2]
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # Update contacts accessed count
        cursor.execute("UPDATE announcements SET contacts_accessed = contacts_accessed + 1 WHERE id = %s", (announcement_id,))
        conn.commit()
        
        cursor.close()
        conn.close()
        
        await callback.answer(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}", show_alert=True)
        
    except Exception as e:
        logger.error(f"Error accessing phone: {e}")
        await callback.answer(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}", show_alert=True)

@router.callback_query(F.data.startswith("more:"))
async def show_more_results(callback: CallbackQuery):
    """Show more search results with pagination"""
    if not callback.data:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return
        
    try:
        parts = callback.data.split(":")
        vehicle_filter = parts[1]
        from_city = parts[2] if parts[2] else None
        to_city = parts[3] if parts[3] else None
        offset = int(parts[4])
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # Build query with same conditions as original search
        query = "SELECT * FROM announcements WHERE status = 'published'"
        conditions = []
        
        if vehicle_filter != "all":
            vehicle_conditions = []
            if vehicle_filter == "tent":
                vehicle_conditions = ["LOWER(vehicle_type) LIKE '%—Ç–µ–Ω—Ç%'", "LOWER(vehicle_type) LIKE '%tent%'"]
            elif vehicle_filter == "ref":
                vehicle_conditions = ["LOWER(vehicle_type) LIKE '%—Ä–µ—Ñ%'", "LOWER(vehicle_type) LIKE '%ref%'"]
            
            if vehicle_conditions:
                conditions.append(f"({' OR '.join(vehicle_conditions)})")
        
        # Universal city search - works with ANY city name in the world  
        if from_city:
            from_city_clean = from_city.lower().strip()
            conditions.append(f"LOWER(from_location) LIKE '%{from_city_clean}%'")
            
        if to_city:
            to_city_clean = to_city.lower().strip()
            conditions.append(f"LOWER(to_location) LIKE '%{to_city_clean}%'")
        
        if conditions:
            query += " AND " + " AND ".join(conditions)
        
        query += f" ORDER BY created_at DESC LIMIT 5 OFFSET {offset}"
        
        cursor.execute(query)
        results = cursor.fetchall()
        
        if not results:
            await callback.answer("‚ùå –ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç")
            return
        
        # Show next 5 results
        for i, row in enumerate(results, offset + 1):
            (announcement_id, title, description, ann_type, status, from_loc, to_loc, 
             weight, cargo_type, vehicle_type, contact_name, contact_phone, contact_address,
             notes, user_tg_id, user_name, location_lat, location_lon, created_at, updated_at, 
             expires_at, views_count, contacts_accessed, message_url) = row
            
            from_flag = get_country_flag(from_loc)
            to_flag = get_country_flag(to_loc)
            
            distance, travel_time = calculate_distance_and_time(from_loc, to_loc)
            time_ago = format_time_ago(created_at)
            
            text = f"<b>{i}. {from_flag} {from_loc} - {to_flag} {to_loc}</b>\n\n"
            text += f"‚öñÔ∏è {weight}\n"
            
            if vehicle_type:
                text += f"üöö {vehicle_type}\n"
            
            if cargo_type:
                text += f"üì¶ {cargo_type}\n"
            
            if distance > 0:
                text += f"üõ£Ô∏è {distance} –∫–º {travel_time:.1f} —á–∞—Å–æ–≤\n\n"
            
            text += time_ago
            
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details:{announcement_id}")]
                ]
            )
            
            await callback.message.answer(text, reply_markup=keyboard)
        
        # Show next pagination button if more results available
        next_offset = offset + 5
        count_query = "SELECT COUNT(*) FROM announcements WHERE status = 'published'"
        if conditions:
            count_query += " AND " + " AND ".join(conditions)
        
        cursor.execute(count_query)
        total_count = cursor.fetchone()[0]
        
        if next_offset < total_count:
            next_keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text=f"{next_offset} –∏–∑ {total_count} –ø–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ", callback_data=f"more:{vehicle_filter}:{from_city or ''}:{to_city or ''}:{next_offset}")]
                ]
            )
            await callback.message.answer(f"üîç –ü–æ–∫–∞–∑–∞–Ω–æ {next_offset} –∏–∑ {total_count}", reply_markup=next_keyboard)
        
        cursor.close()
        conn.close()
        await callback.answer()
        
    except Exception as e:
        logger.error(f"More results error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
